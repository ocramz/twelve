name: Haskell CI

on:
  push:
    branches: [ main ]
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.8.4'
        cabal-version: '3.0'
    
    - name: static linking hack
      working-directory: /usr/lib/gcc/x86_64-linux-gnu/7/
      run: |
        sudo cp crtbeginT.o crtbeginT.o.orig
        sudo cp crtbeginS.o crtbeginT.o

    - name: Build artifact # build the binary
      id: build_artifact
      env:
        ARTIFACTS_DIR: /home/runner/work/twelve/twelve/artifacts
      run: |
        mkdir $ARTIFACTS_DIR
        stack install --local-bin-path $ARTIFACTS_DIR --ghc-options='-fPIC -optl-static -optl-pthread' --no-interleaved-output
        tar cvf artifacts.tar $ARTIFACTS_DIR

    - name: Release
      uses: softprops/action-gh-release@v1
      # if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts.tar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# ## FIXME from here on

#     - name: Create a Release
#       id: create_release
#       uses: actions/create-release@v1.1.4
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#       with:
#         tag_name: tag_${{ github.ref }}
#         # The name of the release. For example, `Release v1.0.1`
#         release_name: release_${{ github.ref }}
        
#     - name: Upload Release Asset
#       id: upload-release-asset 
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         ARTIFACTS_DIR: /home/runner/work/twelve/twelve/artifacts
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: $ARTIFACTS_DIR/twelve
#         asset_name: twelve
#         asset_content_type: application/octet-stream





## ## alternative : zip artifact and upload

    # - name: Build and compress artifact # build the binary
    #   id: build_artifact
    #   env:
    #     ARTIFACTS_DIR: artifacts
    #   run: |
    #     mkdir $ARTIFACTS_DIR
    #     stack install --local-bin-path $ARTIFACTS_DIR --ghc-options='-fPIC -optl-static -optl-pthread' 
    #     zip --junk-paths ./README.md $ARTIFACTS_DIR/twelve
        
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     ARTIFACTS_DIR: artifacts
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ./$ARTIFACTS_DIR/twelve.zip
    #     asset_name: twelve.zip
    #     asset_content_type: application/zip

